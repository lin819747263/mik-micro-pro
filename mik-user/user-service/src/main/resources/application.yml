
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/user?serverTimezone=GMT%2B8&useSSL=true
    username: root
    password: root
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
      compression:
        request:
          enabled: true
          mime-types: text/xml,application/xml, application/json  # 压缩类型
          min-request-size: 1024  # 最小压缩值标准，当数据大于 1024 才会进行压缩
        response:
          enabled: true
      okhttp:
        enabled: true

# knife4j的增强配置，不需要增强可以不配
knife4j:
  enable: true
  setting:
    language: zh_cn

#resilience4j:
#  bulkhead:
#    instances:
#      test01:
#        max-attempts: 2
#        wait-duration: 1s
#    backends:
#  circuitbreaker:
#    instances:
#    backends:
#  ratelimiter:
#    instances:
resilience4j:
  circuitbreaker:
    configs:
      default:
        ringBufferSizeInClosedState: 5 # 熔断器关闭时的缓冲区大小
        ringBufferSizeInHalfOpenState: 2 # 熔断器半开时的缓冲区大小
        waitDurationInOpenState: 10000 # 熔断器从打开到半开需要的时间
        failureRateThreshold: 60 # 熔断器打开的失败阈值
        eventConsumerBufferSize: 10 # 事件缓冲区大小
        registerHealthIndicator: true # 健康监测
        automaticTransitionFromOpenToHalfOpenEnabled: false # 是否自动从打开到半开，不需要触发
#        recordFailurePredicate:    com.example.resilience4j.exceptions.RecordFailurePredicate # 谓词设置异常是否为失败
#        recordExceptions: # 记录的异常
#          - com.example.resilience4j.exceptions.BusinessBException
#          - com.example.resilience4j.exceptions.BusinessAException
#        ignoreExceptions: # 忽略的异常
#          - com.example.resilience4j.exceptions.BusinessAException
    instances:
      backendA:
        baseConfig: default
        waitDurationInOpenState: 5000
        failureRateThreshold: 20
      backendB:
        baseConfig: default
  timelimiter:
    instances:
      backendA:
        timeoutDuration: 2s
        cancelRunningFuture: true
      backendB:
        timeoutDuration: 1s
        cancelRunningFuture: false
server:
  port: ${random.int(2000,8000)}
